@page "/multi-player"
@using TicTacToe.Data.Game;
@using TicTacToe.Data.Game.Managers;
@using TicTacToe.Data.Enums;
@inherits MultiPlayerComponent;
@inject NavigationManager navigationManager;
@inject NavigationManager UriHelper;

<h1>Multiplayer</h1>

@if (IsLoaded)
{
    @if (IsInterrupted)
    {
        <AlertDialog Title="Connection Lost" Content="Connection with your opponent has been lost. Do you want to play again?" OnOkClicked="@PlayAgain"></AlertDialog>
        return;
    }


    @if (PlayerCell == Data.Enums.BoardCell.EMPTY)
    {
        <div class="container flex-column mt-5">
            <h3>Room is full! Try again later.</h3>
            <button class="btn btn-primary btn-grad mt-4" @onclick="@(e => UriHelper.NavigateTo("/"))">Back to home</button>
        </div>
    }
    else
    {
        @if (GameManager.IsGameFinished)
        {
            <AlertDialog Title="@EndGameTitle" Content="@EndGameMessage" OnOkClicked="@PlayAgain"></AlertDialog>
        }
        @if (CanStartGame)
        {
            <GameBoard GameManager="@GameManager" OnTileClicked="@((i) => HandleTileClick(i))" PlayerCell="@PlayerCell"></GameBoard>
        }
        else
        {
            <div class="container">
                <h2 class="mt-5">Waiting for another player...</h2>
            </div>
        }
    }

}

@code{
    protected override async void OnInitialized()
    {
        contextBuilder = new GameContext.Builder(GameMode.MP);
        GameManager = new GameManager(contextBuilder.Build());
        hubUrl = navigationManager.BaseUri.TrimEnd('/') + MultiPlayerHub.HubUrl;
        await ConnectPlayer();
    }
}